import os, subprocess

env = Environment(ENV=os.environ)

QFT_INC = os.environ['QFT_PATH'] + '/include'
QFT_LIB = os.environ['QFT_PATH'] + '/lib'

MINT = os.environ['MINT2'] + '/'
MINT_LIB = MINT + 'lib/'

env.Append(CPPPATH = ['.', QFT_INC, MINT])
env.Append(CXXFLAGS = ['-O3', '-std=c++14'])
#env.Append(CXXFLAGS = ['-g', '-std=c++11'])
env.Append(CXXFLAGS = [
		    '-Wall',
		    '-Wextra',
		    #'-Werror', # Turns warnings into errors.
		    '-pedantic'
		    ])
env.ParseConfig("root-config --libs --cflags --ldflags")
env.Append(LIBPATH = [QFT_LIB, MINT_LIB])
env.Append(LIBS = ['Minuit2', 'MathMore', 'qft++', 'Mint2'])

# Check if OpenMP is available.
ompcheck = subprocess.Popen(['echo |cpp -fopenmp -dM |grep -i open'], stdout = subprocess.PIPE, stderr = subprocess.PIPE,
	                    shell = True)
ompcheck.wait()
if 0 == ompcheck.poll() :
   env.Append(CXXFLAGS = ['-fopenmp'])
   env.Append(LINKFLAGS = ['-fopenmp'])

#Export environment
Export('env')

#Run SConscript files
SConscript('SConscript')
